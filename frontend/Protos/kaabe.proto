syntax = "proto3";

option csharp_namespace = "Kaabe";

package kaabe;


// KaabeService service.
service KaabeService {

  // Gets a service provider.
  rpc GetServiceProviders(GetServiceProvidersRequest) returns (GetServiceProvidersResponse) {};
  rpc AddServiceProvider(ServiceProvider) returns (UniqueResourceMessage) {};
  rpc GetServiceProvider(GetServiceProviderRequest) returns (GetServiceProviderResponse) {};
  rpc UpdateServiceProvider(ServiceProvider) returns (UniqueResourceMessage) {};
  rpc UpdateServiceProviderConfiguration(ServiceProvider) returns (UniqueResourceMessage) {};

  // Categories and menu items.
  rpc GetMenuItems(UniqueResourceMessage) returns (GetMenuItemsResponse) {};

  // Manage item categories.
  rpc AddCategory(CategoryRequest) returns (UniqueResourceMessage) {};
  rpc DeleteCategory(CategoryRequest) returns (UniqueResourceMessage) {};
  rpc UpdateCategory(CategoryRequest) returns (UniqueResourceMessage) {};

  // Manage menu items.
  rpc AddMenuItem(MenuItemRequest) returns (UniqueResourceMessage) {};
  rpc DeleteMenuItem(MenuItemRequest) returns (UniqueResourceMessage) {};
  rpc UpdateMenuItem(MenuItemRequest) returns (UniqueResourceMessage) {};
  rpc ChangeMenuItemStatus(MenuItemRequest) returns (UniqueResourceMessage) {};

  // Manage orders.
  rpc GetOrders(GetOrdersRequest) returns (GetOrdersResponse) {};
  rpc GetOrder(OrderRequest) returns (Order) {};
  rpc AddOrder(OrderRequest) returns (UniqueResourceMessage) {};
  rpc DeleteOrder(OrderRequest) returns (UniqueResourceMessage) {};
  rpc UpdateOrder(OrderRequest) returns (UniqueResourceMessage) {};
  rpc UpdateOrderTableNumber(OrderRequest) returns (UniqueResourceMessage) {};
  rpc ChangeOrderStatus(OrderRequest) returns (UniqueResourceMessage) {};

  // Customers.
  rpc GetCustomers(GetPaginatedResourcesRequest) returns (GetCustomersResponse) {};

  // Payments.
  rpc GetPayments(GetPaginatedResourcesRequest) returns (GetPaymentsResponse) {};

  // Messages.
  rpc GetMessages(GetPaginatedResourcesRequest) returns (GetMessagesResponse) {};

  // Images.
  rpc GetMediaFileToken(TokenRequest) returns (TokenResponse) {};

  // Register device.
  rpc RegisterDevice(RegisterDeviceRequest) returns (UniqueResourceMessage) {};
}

// Requests and responses.
message GetPaginatedResourcesRequest {
  string provider_id = 1;
  int32 page_index = 2;
  int32 page_size = 3;
  string searchText = 4;
}

message GetCustomersResponse {
  repeated Customer customers = 1;
  PaginationInfo pagination = 2;
}

message GetPaymentsResponse {
  repeated Payment payments = 1;
  PaginationInfo pagination = 2;
}

message GetMessagesResponse {
  repeated Message messages = 1;
  PaginationInfo pagination = 2;
}

// Get service providers response.
message GetServiceProvidersResponse {
  repeated ServiceProvider providers = 1;
}

// Request for getting a single service provider.
message GetServiceProviderRequest {
  string guid = 1;
  bool include_items = 2;
}

// Get service provider response.
message GetServiceProviderResponse {
  ServiceProvider provider = 1;
  repeated Category categories = 2;
  repeated MenuItem menu_items = 3;
}

// Request for getting service providers.
message GetServiceProvidersRequest {
}

// Get menu items response.
message GetMenuItemsResponse {
  repeated Category categories = 1;
  repeated MenuItem menu_items = 2;
}

// Request/response for a unique resource.
message UniqueResourceMessage {
  int64 id = 1;
  string guid = 2;
}

// Request for category cruds.
message CategoryRequest {
  string provider_id = 1;
  Category category = 2;
}

// Request for menu item cruds.
message MenuItemRequest {
  string provider_id = 1;
  MenuItem item = 2;
}

// Get orders response.
message GetOrdersRequest {
  string provider_id = 1;
  bool order_queue = 2;
}

message GetOrdersResponse {
  repeated Order orders = 1;
}

// Request for order cruds.
message OrderRequest {
  string provider_id = 1;
  Order item = 2;
}

// Token request.
message TokenRequest {
  string provider_id = 1;
  string resource_id = 2;
  string fileName = 3;
  string extension = 4;
  bool isMenuItem = 5;
}

message TokenResponse {
  string token = 1;
  string resourceId = 2;
  string extension = 3;
  string resourceUri = 4;
}

// Service provider entry.
message ServiceProvider {
    int64 id = 1;
    string guid = 2;
    Currency currency = 3;
    BusinessType business_type = 4;
    ServiceLevel service_level = 5;
    string name = 6;
    string description = 7;
    string phone_number = 8;
    string website = 9;
    string configuration = 10;
    string city = 11;
    string location = 12;
    double Latitude = 13;
    double Longitude = 14;
    string picture = 15;
}

// Category.
message Category {
    int64 id = 1;
    string guid = 2;
    string name = 3;
    string description = 4;
}

// Menu item.
message MenuItem {
    int64 id = 1;
    string guid = 2;
    string name = 3;
    string description = 4;
    MenuItemStatus status = 5;
    int64 item_category_id = 6;
    double sale_unit_price = 7;
    string picture = 8;
}

// Order item.
message Order {
    int64 id = 1;
    string guid = 2;
    string created_at = 3;
    OrderStatus status = 4;
    int32 order_number = 5;
    string table_number = 6;
    string customer_name = 7;
    string customer_notes = 8;
    string additional_info = 9;
    string order_rows = 10;
}

// Customer item.
message Customer {
    int64 id = 1;
    string guid = 2;
    string created_at = 3;
    string name = 4;
    string phone_number = 5;
    string note = 6;
}

// Message item.
message Message {
    int64 id = 1;
    string guid = 2;
    string created_at = 3;
    string msg = 4;
    string from_number = 5;
    bool is_in = 6;
    int64 to_customer = 7;
    int64 from_customer = 8;
}

// Payment item.
message Payment {
    int64 id = 1;
    string guid = 2;
    string created_at = 3;
    double amount = 4;
    Currency currency = 5;
    string note = 6;
    string date = 7;
    string customer_guid = 8;
    string customer_name = 9;
    string customer_number = 10;
}

// Pagination information.
message PaginationInfo {
    int32 page_index = 1;
    int32 page_size = 2;
    int32 result_count = 3;
    int32 total_count = 4;
    int32 pages_count = 5;
}

// Order status.
enum OrderStatus {
  CREATED = 0;
  INQUEUE = 1;
  PREPARING = 2;
  READY = 3;
  INTERRUPTED = 4;
  DELETED = 5;
}

// Menu item status.
enum MenuItemStatus {
  DRAFT = 0;
  PUBLISHED = 1;
  UNPUBLISHED = 2;
}

// Currency.
enum Currency {
  Dollar = 0;
  SomalilandShilling = 1;
  SomaliShilling = 2;
  Frangi = 3;
  KenyaShilling = 4;
  Birr = 5;
}

// Business type.
enum BusinessType {
  Restaurant = 0;
  Cafe = 1;
  Hotel = 2;
}

// Service level.
enum ServiceLevel {
  Basic = 0;
  Standard = 1;
  Premium = 2;
}

// Register device.
message RegisterDeviceRequest {
  string user_id = 1;
  string subscription = 2;
}
